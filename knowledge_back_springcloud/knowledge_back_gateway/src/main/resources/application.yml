server:
  port: 10086
spring:
  application:
    name: gateway
  cloud:
    nacos:
      server-addr: 47.97.230.100
    gateway:
      routes:
        - id: adminservice # 路由唯一标识，一般和微服务应用名称相同即可
          # 目标路由的服务名称,这里采用的是动态路由，格式必须是：【lb://微服务名称】
          uri: lb://adminservice
          # 配置断言，也就是请求的URI满足哪些规则，才可以匹配当前这个routes路由信息
          predicates:
            # 这里使用路由断言，所有 /api/consumer 开头的请求，都将转发到 http://localhost:8081/ 这个服务上面
            - Path=/admin/**

        - id: searchservice # 路由唯一标识，一般和微服务应用名称相同即可
          # 目标路由的服务名称,这里采用的是动态路由，格式必须是：【lb://微服务名称】
          uri: lb://searchservice
          # 配置断言，也就是请求的URI满足哪些规则，才可以匹配当前这个routes路由信息
          predicates:
            # 这里使用路由断言，所有 /api/consumer 开头的请求，都将转发到 http://localhost:8081/ 这个服务上面
            - Path=/search/**

        - id: user0service # 路由唯一标识，一般和微服务应用名称相同即可
          # 目标路由的服务名称,这里采用的是动态路由，格式必须是：【lb://微服务名称】
          uri: lb://user0service
          # 配置断言，也就是请求的URI满足哪些规则，才可以匹配当前这个routes路由信息
          predicates:
            # 这里使用路由断言，所有 /api/consumer 开头的请求，都将转发到 http://localhost:8081/ 这个服务上面
            - Path=/user0/**


#      globalcors: # 全局的跨域配置
#        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题
#          # options请求 就是一种询问服务器是否浏览器可以跨域的请求
#          # 如果每次跨域都有询问服务器是否浏览器可以跨域对性能也是损耗
#        # 可以配置本次跨域检测的有效期maxAge
#        # 在maxAge设置的时间范围内，不去询问，统统允许跨域
#        corsConfigurations:
#          '[/**]':
#            allowedOrigins: # 允许哪些网站的跨域请求
#              - "http://localhost:8090"
#            allowedMethods: # 允许的跨域ajax的请求方式
#              - "GET"
#              - "POST"
#              - "DELETE"
#              - "PUT"
#              - "OPTIONS"
#            allowedHeaders: "*"  # 允许在请求中携带的头信息
#            allowCredentials: true # 允许在请求中携带cookie
#            maxAge: 360000    # 本次跨域检测的有效期(单位毫秒)
#            # 有效期内，跨域请求不会一直发option请求去增大服务器压力